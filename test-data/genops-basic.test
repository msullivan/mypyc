[case testTrivialFunction]
def f() -> int:
    return 1
[out]
def f():
    r0 :: int
L0:
    r0 = 1
    return r0

[case testFunctionArgument]
def f(x: int) -> int:
    return x
[out]
def f(x):
    x :: int
L0:
    return x

[case testExplicitNoneReturn]
def f() -> None:
    return
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testExplicitNoneReturn2]
def f() -> None:
    return None
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testAssignment]
def f() -> int:
    x = 1
    y = x
    return y
[out]
def f():
    x, y :: int
L0:
    x = 1
    y = x
    return y

[case testAssignmentTwice]
def f(x: int) -> None:
    y = 1
    y = x
    return
[out]
def f(x):
    x, y :: int
    r0 :: None
L0:
    y = 1
    y = x
    r0 = None
    return r0

[case testIntArithmetic]
def f(x: int, y: int) -> int:
    return x * (y + 1)
[out]
def f(x, y):
    x, y, r0, r1, r2 :: int
L0:
    r0 = 1
    r1 = y + r0 :: int
    r2 = x * r1 :: int
    return r2

[case testIf]
def f(x: int, y: int) -> int:
    if x < y:
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if x < y goto L1 else goto L2 :: int
L1:
    x = 1
L2:
    return x

[case testIfElse]
def f(x: int, y: int) -> int:
    if x < y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if x < y goto L1 else goto L2 :: int
L1:
    x = 1
    goto L3
L2:
    x = 2
L3:
    return x

[case testAnd]
def f(x: int, y: int) -> int:
    if x < y and x > y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if x < y goto L1 else goto L3 :: int
L1:
    if x > y goto L2 else goto L3 :: int
L2:
    x = 1
    goto L4
L3:
    x = 2
L4:
    return x

[case testOr]
def f(x: int, y: int) -> int:
    if x < y or x > y:
        x = 1
    else:
        x = 2
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if x < y goto L2 else goto L1 :: int
L1:
    if x > y goto L2 else goto L3 :: int
L2:
    x = 1
    goto L4
L3:
    x = 2
L4:
    return x

[case testSimpleNot]
def f(x: int, y: int) -> int:
    if not (x < y):
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if not x < y goto L1 else goto L2 :: int
L1:
    x = 1
L2:
    return x

[case testNotAnd]
def f(x: int, y: int) -> int:
    if not (x < y and x > y):
        x = 1
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    if not x < y goto L2 else goto L1 :: int
L1:
    if not x > y goto L2 else goto L3 :: int
L2:
    x = 1
L3:
    return x

[case testWhile]
def f(x: int, y: int) -> int:
    while x > y:
        x = x - y
    return x
[out]
def f(x, y):
    x, y :: int
L0:
L1:
    if x > y goto L2 else goto L3 :: int
L2:
    x = x - y :: int
    goto L1
L3:
    return x

[case testWhile2]
def f(x: int, y: int) -> int:
    x = 1
    while x > y:
        x = x - y
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    x = 1
L1:
    if x > y goto L2 else goto L3 :: int
L2:
    x = x - y :: int
    goto L1
L3:
    return x

[case testImplicitNoneReturn]
def f() -> None:
    pass
[out]
def f():
    r0 :: None
L0:
    r0 = None
    return r0

[case testImplicitNoneReturn2]
def f() -> None:
    x = 1
[out]
def f():
    x :: int
    r0 :: None
L0:
    x = 1
    r0 = None
    return r0

[case testImplicitNoneReturnAndIf]
def f(x: int, y: int) -> None:
    if x < y:
        x = 1
    else:
        y = 2
[out]
def f(x, y):
    x, y :: int
    r0 :: None
L0:
    if x < y goto L1 else goto L2 :: int
L1:
    x = 1
    goto L3
L2:
    y = 2
L3:
    r0 = None
    return r0

[case testRecursion]
def f(n: int) -> int:
    if n <= 1:
        return 1
    else:
        return f(n - 1) + f(n - 2)
[out]
def f(n):
    n, r0, r1, r2, r3, r4, r5, r6, r7, r8 :: int
L0:
    r0 = 1
    if n <= r0 goto L1 else goto L2 :: int
L1:
    r1 = 1
    return r1
L2:
    r3 = 1
    r4 = n - r3 :: int
    r2 = f(r4)
    r6 = 2
    r7 = n - r6 :: int
    r5 = f(r7)
    r8 = r2 + r5 :: int
    return r8
L3:
    unreachable

[case testReportTypeCheckError]
def f() -> None:
    return 1 # E: No return value expected

[case testReportSemanticaAnalysisError1]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined

[case testReportSemanticaAnalysisError2]
def f() -> None:
    x # E: Name 'x' is not defined

[case testElif]
def f(n: int) -> int:
    if n < 0:
        x = 1
    elif n == 0:
        x = 1
    else:
        x = 2
    return x
[out]
def f(n):
    n, r0, x, r1 :: int
L0:
    r0 = 0
    if n < r0 goto L1 else goto L2 :: int
L1:
    x = 1
    goto L6
L2:
    r1 = 0
    if n == r1 goto L3 else goto L4 :: int
L3:
    x = 1
    goto L5
L4:
    x = 2
L5:
L6:
    return x

[case testUnaryMinus]
def f(n: int) -> int:
    return -1
[out]
def f(n):
    n, r0, r1, r2 :: int
L0:
    r0 = 1
    r2 = 0
    r1 = r2 - r0 :: int
    return r1

[case testConditionalExpr]
def f(n: int) -> int:
    return 0 if n == 0 else 1
[out]
def f(n):
    n, r0, r1 :: int
L0:
    r0 = 0
    if n == r0 goto L1 else goto L2 :: int
L1:
    r1 = 0
    goto L3
L2:
    r1 = 1
L3:
    return r1

[case testOperatorAssignment]
def f() -> int:
    x = 0
    x += 1
    return x
[out]
def f():
    x, r0 :: int
L0:
    x = 0
    r0 = 1
    x = x + r0 :: int
    return x

[case testTrue]
def f() -> bool:
    return True
[out]
def f():
    r0 :: bool
L0:
    r0 = True
    return r0

[case testFalse]
def f() -> bool:
    return False
[out]
def f():
    r0 :: bool
L0:
    r0 = False
    return r0

[case testBoolCond]
def f(x: bool) -> bool:
    if x:
        return False
    else:
        return True
[out]
def f(x):
    x, r0, r1 :: bool
L0:
    if x goto L1 else goto L2 :: bool
L1:
    r0 = False
    return r0
L2:
    r1 = True
    return r1
L3:
    unreachable

[case testPycall]
import testmodule

def f(x: int) -> int:
    return testmodule.factorial(x)
[file testmodule.py]
def factorial(x: int) -> int:
    if x == 0:
        return 1
    else:
        return x * factorial(x-1)
[out]
def f(x):
    x :: int
    r0, r1, r2, r3 :: object
    r4 :: int
L0:
    r1 = module_testmodule :: static
    r0 = r1.factorial
    r3 = box(int, x)
    r2 = r0(r3) :: py
    r4 = unbox(int, r2)
    return r4

[case testPrintFullname]
import builtins
def f(x: int) -> None:
    builtins.print(5)
[out]
def f(x):
    x :: int
    r0, r1, r2 :: object
    r3 :: int
    r4 :: object
    r5, r6 :: None
L0:
    r1 = module_builtins :: static
    r0 = r1.print
    r3 = 5
    r4 = box(int, r3)
    r2 = r0(r4) :: py
    r5 = cast(None, r2)
    r6 = None
    return r6

[case testPrint]
import builtins
def f(x: int) -> None:
    print(5)
[out]
def f(x):
    x :: int
    r0, r1, r2 :: object
    r3 :: int
    r4 :: object
    r5, r6 :: None
L0:
    r1 = module_builtins :: static
    r0 = r1.print
    r3 = 5
    r4 = box(int, r3)
    r2 = r0(r4) :: py
    r5 = cast(None, r2)
    r6 = None
    return r6

[case testUnicodeLiteral]
def f() -> str:
    return "some string"
[out]
def f():
    r0 :: unicode
L0:
    r0 = __unicode_0 :: static
    return r0

[case testPyMethodCall]
from typing import List
def f(x: List[int]) -> int:
    return x.pop()
[out]
def f(x):
    x :: list
    r0 :: unicode
    r1 :: object
    r2 :: int
L0:
    r0 = __unicode_0 :: static
    r1 = x.r0() :: py
    r2 = unbox(int, r1)
    return r2

